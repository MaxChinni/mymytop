#!/bin/bash

##
# Init
#
readonly SUMMARY_SQL_TPL="SELECT id, user, db, command, time, state, concat(substr(replace(info, '\r\n', ' '), 1, 30), '...') as info FROM INFORMATION_SCHEMA.PROCESSLIST WHERE {WHERE} ORDER BY time desc"
readonly EXPANDED_SQL_TPL="SELECT id, user, db, command, time, state, info FROM INFORMATION_SCHEMA.PROCESSLIST WHERE {WHERE} ORDER BY time desc"
sql_template="$SUMMARY_SQL_TPL"
delay=3
idle=1
colorize=1

##
# Functions
#
isInteger()
{
    grep -qE '^[0-9]+$' <<< "$1"
}

isFloat()
{
    grep -qE '^[0-9]+|[0-9]*\.[0-9]+$' <<< "$1"
}

error()
{
    echo "$(basename "$0"): $1" >&2
    exit "$2"
}

pressAnyKey()
{
    read -r -n1 -p 'Press any key...'
}

refresh()
{
    clear
    echo "$(date) - type \"h\" for help"
    echo -n "Idle display is $(test "$idle" -eq 1 && echo on || echo off), "
    echo -n "delay is ${delay}s, "
    echo -n "colors are $(test "$colorize" -eq 1 && echo on || echo off)"
    echo
    echo
    prepareSQL
    mysql --table <<< "$sql" | colorizeOutput
}

prepareSQL()
{
    sql="$sql_template"
    if [[ $idle -eq 0 ]]; then
        sql="$(sed "s/{WHERE}/state LIKE '%executing%' AND {WHERE}/g" <<< "$sql")"
    fi
    sql="$(sed "s/{WHERE}/1/g" <<< "$sql")"
    sql="$(sed "s/ AND 1| WHERE 1//g" <<< "$sql")"
}

colorizeOutput()
{
    local rowNum=0
    # colors: https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
    local red="\x1b[91m"
    local cyan="\x1b[36m"
    local reset="\x1b[0m"

    if [[ $colorize -eq 0 ]]; then
        cat
        return
    fi

    while read -r row; do
        if [[ $rowNum -gt 2 ]]; then
            echo "$row" | \
                sed "s/executing/${red}executing${reset}/" | \
                sed -r 's/ \| ([^|]+)\|$/ | '"${cyan}"'\1'"${reset}"'|/'
        else
            echo "$row"
        fi
        let rowNum++
    done
}

mysqlKillPid()
{
    local pid="$1"
    isInteger "$pid" || error "pid is not valid" 10
    echo "kill $pid;" | mysql -v
    pressAnyKey
}

##
# Checks
#
[[ -r ~/.my.cnf ]] || error "cannot find ~/.my.cnf" 1

##
# Main
#
refresh
while read -r -s -n1 -t"$delay" c || :; do
    if [[ $c = 'h' ]]; then
        echo "Help"
        echo "  q : quit"
        echo "  p : pause"
        echo "  k : kill id"
        echo "  s : change sleep time (refresh period)"
        echo "  x : toggle show full query"
        echo "  i : toggle display of idle thread (show only \"state\" \"executing\")"
        echo "  c : toggle colors"
        echo
        pressAnyKey
    elif [[ $c = 'p' ]]; then
        echo "Paused"
        pressAnyKey
    elif [[ $c = 'q' ]]; then
        break
    elif [[ $c = 'k' ]]; then
        read -r -p 'kill id: ' pidToKill
        if [[ -n $pidToKill ]]; then
            mysqlKillPid "$pidToKill"
        fi
    elif [[ $c = 'i' ]]; then
        idle=$((++idle % 2))
    elif [[ $c = 'c' ]]; then
        colorize=$((++colorize % 2))
    elif [[ $c = 's' ]]; then
        prevDelay="$delay"
        read -r -p 'Sleep time: ' delay
        if [[ -z $delay ]]; then
            delay="$prevDelay"
        fi
        isFloat "$delay" || error "delay is not valid" 11
    elif [[ $c = 'x' ]]; then
        if [[ $sql_template = "$SUMMARY_SQL_TPL" ]]; then
            sql_template="$EXPANDED_SQL_TPL"
        else
            sql_template="$SUMMARY_SQL_TPL"
        fi
    fi
    refresh
done
echo
